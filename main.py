from telebot import TeleBot
from telebot.types import Message
from buttons import menu_buttons
from func_bot import get_apod_photo_info, get_random_space_fact, get_iss_location, get_asteroid

TOKEN = 'YOUR_TOKEN'
NASA_API = 'YOUR_TOKEN'

bot = TeleBot(TOKEN)


@bot.message_handler(commands=['start'])
def command_start(message: Message):
    chat_id = message.chat.id
    username = message.from_user.username
    bot.send_message(chat_id, f'''–ó–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ{username} –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å–≤—É–µ—Ç ASTRO-BOTüöÄüåê
–í—ã–±–µ—Ä–µ—Ç–µ –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –ù–∞–∂–∞–≤ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–Ω–∏–∑—É ''', reply_markup=menu_buttons())


MAX_CAPTION_LENGTH = 1024


@bot.message_handler(regexp='–§–æ—Ç–æ –¥–Ω—è üåå')
def get_apod_photo(message):
    chat_id = message.chat.id
    try:
        data = get_apod_photo_info(NASA_API)
        if data.get('media_type') == 'image':
            photo_url = data.get('url')
            title = data.get('title')
            explanation = data.get('explanation')

            caption = f"*{title}*\n\n{explanation}"
            MAX_CAPTION_LENGTH = 1024
            if len(caption) > MAX_CAPTION_LENGTH:
                caption = caption[:MAX_CAPTION_LENGTH - 3] + "..."

            bot.send_photo(chat_id, photo_url, caption=caption, parse_mode='Markdown')
        else:
            bot.send_message(chat_id, "–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –æ–±—ä–µ–∫—Ç ‚Äî –≤–∏–¥–µ–æ, —Ñ–æ—Ç–æ –Ω–µ—Ç.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")


@bot.message_handler(regexp='–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç ü™ê')
def send_space_fact(message: Message):
    chat_id = message.chat.id
    try:
        fact = get_random_space_fact(NASA_API)

        # Telegram –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –±–æ–ª–µ–µ 4096 —Å–∏–º–≤–æ–ª–æ–≤, –Ω–æ –≤ –ø–æ–¥–ø–∏—Å–∏ —Ñ–æ—Ç–æ ‚Äî –º–∞–∫—Å–∏–º—É–º 1024
        if len(fact) > 4000:
            fact = fact[:3997] + "..."

        bot.send_message(chat_id, fact, parse_mode='Markdown')
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–∫—Ç–∞: {e}")
        bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–∫—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@bot.message_handler(regexp='–ì–¥–µ —Å–µ–π—á–∞—Å –ú–ö–°?')
def handle_iss_location(message: Message):
    chat_id = message.chat.id
    msg, lat, lon = get_iss_location()
    if lat is not None and lon is not None:
        try:
            iss_location = get_iss_location()
            bot.send_message(chat_id, get_iss_location())
            bot.send_location(chat_id, lat, lon)
        except:
            bot.send_message(chat_id, text='–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–µ —Ñ–∞—Ä—Ç–æ–Ω—É–ª–æ')


@bot.message_handler(regexp='Restart üîÅ')
def Restrart(message: Message):
    chat_id = message.chat.id
    bot.send_message(chat_id, text='/start')

@bot.message_handler(regexp='–ê—Å—Ç–µ—Ä–æ–∏–¥—ã —Ä—è–¥–æ–º ‚òÑ')
def handle_asrto_location(message: Message):
    chat_id = message.chat.id
    text = get_asteroid()
    bot.send_message(chat_id, text)

bot.polling(none_stop=True)
